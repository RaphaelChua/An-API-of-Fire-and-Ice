{"ast":null,"code":"import { charactersService } from \"../_services\";\nimport { charactersConstant } from \"../_constants\";\nexport var charactersAction = {\n  getCharacter: getCharacter,\n  getCharacterList: getCharacterList,\n  setCharacter: setCharacter,\n  getMultipleCharacters: getMultipleCharacters\n};\n\nfunction getCharacter(id) {\n  return function (dispatch) {\n    dispatch(request(id));\n    charactersService.getCharacter(id).then(function (character) {\n      dispatch(success(character));\n    }, function (error) {\n      dispatch(failure(error));\n    });\n  };\n\n  function request(character) {\n    return {\n      type: charactersConstant.GET_CHARACTER_REQUEST,\n      character: character\n    };\n  }\n\n  ;\n\n  function success(character) {\n    return {\n      type: charactersConstant.GET_CHARACTER_SUCCESS,\n      character: character\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: charactersConstant.GET_CHARACTER_FAILURE,\n      error: error\n    };\n  }\n\n  ;\n}\n\nfunction getMultipleCharacters(names) {\n  return function (dispatch) {\n    var characterList = [];\n    names.map(function (characterUrl) {\n      charactersService.getCharacter(characterUrl).then(function (respond) {\n        characterList.push(respond);\n        dispatch(success(characterList));\n      }, function (error) {\n        dispatch(failure(error));\n      });\n    });\n  };\n\n  function request(character) {\n    return {\n      type: charactersConstant.GET_CHARACTER_REQUEST,\n      character: character\n    };\n  }\n\n  ;\n\n  function success(character) {\n    return {\n      type: charactersConstant.GET_CHARACTER_SUCCESS,\n      character: character\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: charactersConstant.GET_CHARACTER_FAILURE,\n      error: error\n    };\n  }\n\n  ;\n}\n\nfunction setCharacter(obj) {\n  return function (dispatch) {\n    dispatch(success(obj));\n\n    (function (error) {\n      dispatch(failure(error));\n    });\n  };\n\n  function request(singleCharacter) {\n    return {\n      type: charactersConstant.SET_SINGLE_CHARACTER_REQUEST,\n      singleCharacter: singleCharacter\n    };\n  }\n\n  ;\n\n  function success(singleCharacter) {\n    return {\n      type: charactersConstant.SET_SINGLE_CHARACTER_SUCCESS,\n      singleCharacter: singleCharacter\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: charactersConstant.SET_SINGLE_CHARACTER_FAILURE,\n      error: error\n    };\n  }\n\n  ;\n}\n\nfunction getCharacterList(listURL) {\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      var characterList = [];\n      Promise.all(listURL.map(function (characterUrl) {\n        charactersService.getCharacter(characterUrl).then(function (respond) {\n          characterList.push(respond);\n        }, function (error) {\n          reject(dispatch(failure(error)));\n        });\n      })).then(function () {\n        console.log(characterList);\n        resolve(dispatch(success(characterList)));\n      });\n    });\n  };\n\n  function request(characterUrl) {\n    return {\n      type: charactersConstant.GET_CHARACTER_LIST_REQUEST,\n      characterUrl: characterUrl\n    };\n  }\n\n  ;\n\n  function success(characterList) {\n    return {\n      type: charactersConstant.GET_CHARACTER_LIST_SUCCESS,\n      characterList: characterList\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: charactersConstant.GET_CHARACTER_LIST_FAILURE,\n      error: error\n    };\n  }\n\n  ;\n}","map":{"version":3,"sources":["/Users/raphaelchua/Documents/GITHUB_PROJECTS/An-API-of-Fire-and-Ice/src/_actions/Characters.action.js"],"names":["charactersService","charactersConstant","charactersAction","getCharacter","getCharacterList","setCharacter","getMultipleCharacters","id","dispatch","request","then","character","success","error","failure","type","GET_CHARACTER_REQUEST","GET_CHARACTER_SUCCESS","GET_CHARACTER_FAILURE","names","characterList","map","characterUrl","respond","push","obj","singleCharacter","SET_SINGLE_CHARACTER_REQUEST","SET_SINGLE_CHARACTER_SUCCESS","SET_SINGLE_CHARACTER_FAILURE","listURL","Promise","resolve","reject","all","console","log","GET_CHARACTER_LIST_REQUEST","GET_CHARACTER_LIST_SUCCESS","GET_CHARACTER_LIST_FAILURE"],"mappings":"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","sourcesContent":["import { charactersService } from \"../_services\"\nimport { charactersConstant } from \"../_constants\"\n\n\nexport const charactersAction = {\n    getCharacter,\n    getCharacterList,\n    setCharacter,\n    getMultipleCharacters,\n}\n\nfunction getCharacter(id){\n    return dispatch =>{\n        dispatch(request(id));\n\n        charactersService.getCharacter(id).then(\n            character => {\n                dispatch(success(character))\n            },\n            error =>{\n                dispatch(failure(error))\n            }\n        )\n    }\n    function request(character) {return {type:charactersConstant.GET_CHARACTER_REQUEST,character}};\n    function success(character) {return{type:charactersConstant.GET_CHARACTER_SUCCESS,character}}\n    function failure(error) {return {type:charactersConstant.GET_CHARACTER_FAILURE,error}};\n}\n\nfunction getMultipleCharacters(names){\n    return dispatch =>{\n        let characterList = [];\n        names.map(characterUrl=>{\n            charactersService.getCharacter(characterUrl).then(\n                respond =>{\n                    characterList.push(respond);\n                    dispatch(success(characterList))\n                },\n                error =>{\n                    dispatch(failure(error))\n                }\n            )\n        })\n    }\n\n    function request(character) {return {type:charactersConstant.GET_CHARACTER_REQUEST,character}};\n    function success(character) {return{type:charactersConstant.GET_CHARACTER_SUCCESS,character}}\n    function failure(error) {return {type:charactersConstant.GET_CHARACTER_FAILURE,error}};\n}\n\nfunction setCharacter(obj)\n{\n    return dispatch =>{\n        dispatch(success(obj))\n        \n        error=>{\n            dispatch(failure(error))\n        }\n    }\n    function request(singleCharacter) {return {type:charactersConstant.SET_SINGLE_CHARACTER_REQUEST,singleCharacter}};\n    function success(singleCharacter) {return{type:charactersConstant.SET_SINGLE_CHARACTER_SUCCESS,singleCharacter}}\n    function failure(error) {return {type:charactersConstant.SET_SINGLE_CHARACTER_FAILURE,error}};\n}\n\nfunction getCharacterList(listURL){\n    return dispatch =>{\n        return new Promise (function(resolve,reject){\n            let characterList = [];\n            Promise.all(listURL.map(characterUrl=>{\n                charactersService.getCharacter(characterUrl).then(\n                    respond =>{\n                        characterList.push(respond);\n                    },\n                    error =>{\n                        reject(dispatch(failure(error)))\n                    }\n                )\n            })).then(()=>{\n                console.log(characterList)\n                resolve(dispatch(success(characterList)))\n            })\n        \n        })\n    }\n\n    function request(characterUrl) {return {type:charactersConstant.GET_CHARACTER_LIST_REQUEST,characterUrl}};\n    function success(characterList) {return{type:charactersConstant.GET_CHARACTER_LIST_SUCCESS,characterList}}\n    function failure(error) {return {type:charactersConstant.GET_CHARACTER_LIST_FAILURE,error}};\n\n}\n\n\n// return dispatch =>{\n//     let characterList = [];\n//     const promiseList = listURL.map(characterUrl=>{\n//         charactersService.getCharacter(characterUrl).then(\n//             respond =>{\n//                 characterList.push(respond);\n//             },\n//             error =>{\n//                 dispatch(failure(error))\n//             }\n//         )\n//     })\n//     Promise.all(promiseList).then(()=>{\n//         dispatch(success(characterList))\n//     })\n    \n\n// }"]},"metadata":{},"sourceType":"module"}